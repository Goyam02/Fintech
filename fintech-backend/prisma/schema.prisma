generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  financialHealth   FinancialHealth?
  transactions      Transaction[]
  investments       Investment[]
  recommendations   Recommendation[]
  portfolioItems    PortfolioItem[]
  spendingCategories SpendingCategory[]
}

model FinancialHealth {
  id                 String              @id @default(uuid())
  userId             String              @unique
  overallScore       Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  factors            FinancialFactor[]
}

model FinancialFactor {
  id                 String            @id @default(uuid())
  financialHealthId  String
  name               String
  score              Int
  status             String // excellent, good, fair, needs attention
  description        String
  trend              String // up, down, stable
  trendValue         String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  financialHealth    FinancialHealth   @relation(fields: [financialHealthId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String      @id @default(uuid())
  userId      String
  name        String
  description String
  date        DateTime
  amount      Float
  type        String      // income, expense
  category    String
  icon        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpendingCategory {
  id          String      @id @default(uuid())
  userId      String
  name        String
  value       Float
  color       String
  month       Int
  year        Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investment {
  id             String      @id @default(uuid())
  userId         String
  totalValue     Float
  ytdReturn      Float
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolioItems PortfolioItem[]
  monthlyPerformance MonthlyPerformance[]
}

model PortfolioItem {
  id           String     @id @default(uuid())
  userId       String
  investmentId String
  name         String
  value        Float
  percentage   Float
  color        String
  performance  Float?     // percentage gain/loss
  isTopPerformer Boolean  @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonthlyPerformance {
  id           String     @id @default(uuid())
  investmentId String
  month        String
  value        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
}

model MonthlySpending {
  id           String     @id @default(uuid())
  month        String
  value        Float
  year         Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Recommendation {
  id           String     @id @default(uuid())
  userId       String
  title        String
  description  String
  impact       String     // high, medium, low
  icon         String
  implemented  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}